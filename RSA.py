def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

def extended_gcd(a, b):
    if b == 0:
        return a, 1, 0
    else:
        g, x1, y1 = extended_gcd(b, a % b)
        x = y1
        y = x1 - (a // b) * y1
        return g, x, y

def mod_inverse(e, phi):
    g, x, _ = extended_gcd(e, phi)
    if g != 1:
        raise Exception("–û–±—Ä–∞—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    return x % phi

def find_coprime(phi):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ e > 1, —Ç–∞–∫–æ–µ —á—Ç–æ gcd(e, phi) == 1"""
    for e in range(2, phi):
        if gcd(e, phi) == 1:
            return e
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ e.")

def generate_keys(p, q):
    print("\n –®–∞–≥ 1: –í—ã—á–∏—Å–ª—è–µ–º n –∏ œÜ(n)")
    n = p * q
    phi = (p - 1) * (q - 1)
    print(f"n = {p} * {q} = {n}")
    print(f"œÜ(n) = ({p - 1}) * ({q - 1}) = {phi}")

    print("\nüîç –®–∞–≥ 2: –ò—â–µ–º e, –≤–∑–∞–∏–º–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —Å œÜ(n)")
    e = find_coprime(phi)
    print(f" –ü–æ–¥–æ–±—Ä–∞–Ω–æ e = {e}")

    print("\n –®–∞–≥ 3: –í—ã—á–∏—Å–ª—è–µ–º d, —Ç–∞–∫–æ–µ —á—Ç–æ (e * d) % œÜ(n) = 1")
    d = mod_inverse(e, phi)
    print(f"d = {d}, —Ç–∞–∫ –∫–∞–∫ {e} * {d} ‚â° 1 (mod {phi})")

    return (e, n), (d, n), phi



